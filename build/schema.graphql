type AddedOwner @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApproveHash @entity(immutable: true) {
  id: Bytes!
  approvedHash: Bytes! # bytes32
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChangedFallbackHandler @entity(immutable: true) {
  id: Bytes!
  handler: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChangedGuard @entity(immutable: true) {
  id: Bytes!
  guard: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ChangedThreshold @entity(immutable: true) {
  id: Bytes!
  threshold: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DisabledModule @entity(immutable: true) {
  id: Bytes!
  module: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EnabledModule @entity(immutable: true) {
  id: Bytes!
  module: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExecutionFailure @entity(immutable: true) {
  id: Bytes!
  txHash: Bytes! # bytes32
  payment: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExecutionFromModuleFailure @entity(immutable: true) {
  id: Bytes!
  module: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExecutionFromModuleSuccess @entity(immutable: true) {
  id: Bytes!
  module: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ExecutionSuccess @entity(immutable: true) {
  id: Bytes!
  txHash: Bytes! # bytes32
  payment: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemovedOwner @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SafeModuleTransaction @entity(immutable: true) {
  id: Bytes!
  module: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  data: Bytes! # bytes
  operation: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SafeMultiSigTransaction @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  value: BigInt! # uint256
  data: Bytes! # bytes
  operation: Int! # uint8
  safeTxGas: BigInt! # uint256
  baseGas: BigInt! # uint256
  gasPrice: BigInt! # uint256
  gasToken: Bytes! # address
  refundReceiver: Bytes! # address
  signatures: Bytes! # bytes
  additionalInfo: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SafeReceived @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SafeSetup @entity(immutable: true) {
  id: Bytes!
  initiator: Bytes! # address
  owners: [Bytes!]! # address[]
  threshold: BigInt! # uint256
  initializer: Bytes! # address
  fallbackHandler: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SignMsg @entity(immutable: true) {
  id: Bytes!
  msgHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
