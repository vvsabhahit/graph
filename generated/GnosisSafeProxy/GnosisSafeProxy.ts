// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddedOwner extends ethereum.Event {
  get params(): AddedOwner__Params {
    return new AddedOwner__Params(this);
  }
}

export class AddedOwner__Params {
  _event: AddedOwner;

  constructor(event: AddedOwner) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ApproveHash extends ethereum.Event {
  get params(): ApproveHash__Params {
    return new ApproveHash__Params(this);
  }
}

export class ApproveHash__Params {
  _event: ApproveHash;

  constructor(event: ApproveHash) {
    this._event = event;
  }

  get approvedHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ChangedFallbackHandler extends ethereum.Event {
  get params(): ChangedFallbackHandler__Params {
    return new ChangedFallbackHandler__Params(this);
  }
}

export class ChangedFallbackHandler__Params {
  _event: ChangedFallbackHandler;

  constructor(event: ChangedFallbackHandler) {
    this._event = event;
  }

  get handler(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ChangedGuard extends ethereum.Event {
  get params(): ChangedGuard__Params {
    return new ChangedGuard__Params(this);
  }
}

export class ChangedGuard__Params {
  _event: ChangedGuard;

  constructor(event: ChangedGuard) {
    this._event = event;
  }

  get guard(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ChangedThreshold extends ethereum.Event {
  get params(): ChangedThreshold__Params {
    return new ChangedThreshold__Params(this);
  }
}

export class ChangedThreshold__Params {
  _event: ChangedThreshold;

  constructor(event: ChangedThreshold) {
    this._event = event;
  }

  get threshold(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DisabledModule extends ethereum.Event {
  get params(): DisabledModule__Params {
    return new DisabledModule__Params(this);
  }
}

export class DisabledModule__Params {
  _event: DisabledModule;

  constructor(event: DisabledModule) {
    this._event = event;
  }

  get module(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EnabledModule extends ethereum.Event {
  get params(): EnabledModule__Params {
    return new EnabledModule__Params(this);
  }
}

export class EnabledModule__Params {
  _event: EnabledModule;

  constructor(event: EnabledModule) {
    this._event = event;
  }

  get module(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ExecutionFailure extends ethereum.Event {
  get params(): ExecutionFailure__Params {
    return new ExecutionFailure__Params(this);
  }
}

export class ExecutionFailure__Params {
  _event: ExecutionFailure;

  constructor(event: ExecutionFailure) {
    this._event = event;
  }

  get txHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get payment(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ExecutionFromModuleFailure extends ethereum.Event {
  get params(): ExecutionFromModuleFailure__Params {
    return new ExecutionFromModuleFailure__Params(this);
  }
}

export class ExecutionFromModuleFailure__Params {
  _event: ExecutionFromModuleFailure;

  constructor(event: ExecutionFromModuleFailure) {
    this._event = event;
  }

  get module(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ExecutionFromModuleSuccess extends ethereum.Event {
  get params(): ExecutionFromModuleSuccess__Params {
    return new ExecutionFromModuleSuccess__Params(this);
  }
}

export class ExecutionFromModuleSuccess__Params {
  _event: ExecutionFromModuleSuccess;

  constructor(event: ExecutionFromModuleSuccess) {
    this._event = event;
  }

  get module(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ExecutionSuccess extends ethereum.Event {
  get params(): ExecutionSuccess__Params {
    return new ExecutionSuccess__Params(this);
  }
}

export class ExecutionSuccess__Params {
  _event: ExecutionSuccess;

  constructor(event: ExecutionSuccess) {
    this._event = event;
  }

  get txHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get payment(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RemovedOwner extends ethereum.Event {
  get params(): RemovedOwner__Params {
    return new RemovedOwner__Params(this);
  }
}

export class RemovedOwner__Params {
  _event: RemovedOwner;

  constructor(event: RemovedOwner) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SafeModuleTransaction extends ethereum.Event {
  get params(): SafeModuleTransaction__Params {
    return new SafeModuleTransaction__Params(this);
  }
}

export class SafeModuleTransaction__Params {
  _event: SafeModuleTransaction;

  constructor(event: SafeModuleTransaction) {
    this._event = event;
  }

  get module(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get operation(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class SafeMultiSigTransaction extends ethereum.Event {
  get params(): SafeMultiSigTransaction__Params {
    return new SafeMultiSigTransaction__Params(this);
  }
}

export class SafeMultiSigTransaction__Params {
  _event: SafeMultiSigTransaction;

  constructor(event: SafeMultiSigTransaction) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get operation(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get safeTxGas(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get baseGas(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get gasPrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get gasToken(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get refundReceiver(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get signatures(): Bytes {
    return this._event.parameters[9].value.toBytes();
  }

  get additionalInfo(): Bytes {
    return this._event.parameters[10].value.toBytes();
  }
}

export class SafeReceived extends ethereum.Event {
  get params(): SafeReceived__Params {
    return new SafeReceived__Params(this);
  }
}

export class SafeReceived__Params {
  _event: SafeReceived;

  constructor(event: SafeReceived) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SafeSetup extends ethereum.Event {
  get params(): SafeSetup__Params {
    return new SafeSetup__Params(this);
  }
}

export class SafeSetup__Params {
  _event: SafeSetup;

  constructor(event: SafeSetup) {
    this._event = event;
  }

  get initiator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owners(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get threshold(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get initializer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get fallbackHandler(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class SignMsg extends ethereum.Event {
  get params(): SignMsg__Params {
    return new SignMsg__Params(this);
  }
}

export class SignMsg__Params {
  _event: SignMsg;

  constructor(event: SignMsg) {
    this._event = event;
  }

  get msgHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class GnosisSafeProxy__execTransactionFromModuleReturnDataResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getSuccess(): boolean {
    return this.value0;
  }

  getReturnData(): Bytes {
    return this.value1;
  }
}

export class GnosisSafeProxy__getModulesPaginatedResult {
  value0: Array<Address>;
  value1: Address;

  constructor(value0: Array<Address>, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getArray(): Array<Address> {
    return this.value0;
  }

  getNext(): Address {
    return this.value1;
  }
}

export class GnosisSafeProxy extends ethereum.SmartContract {
  static bind(address: Address): GnosisSafeProxy {
    return new GnosisSafeProxy("GnosisSafeProxy", address);
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  approvedHashes(param0: Address, param1: Bytes): BigInt {
    let result = super.call(
      "approvedHashes",
      "approvedHashes(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_approvedHashes(
    param0: Address,
    param1: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "approvedHashes",
      "approvedHashes(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  domainSeparator(): Bytes {
    let result = super.call(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_domainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  encodeTransactionData(
    to: Address,
    value: BigInt,
    data: Bytes,
    operation: i32,
    safeTxGas: BigInt,
    baseGas: BigInt,
    gasPrice: BigInt,
    gasToken: Address,
    refundReceiver: Address,
    _nonce: BigInt
  ): Bytes {
    let result = super.call(
      "encodeTransactionData",
      "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256):(bytes)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(operation)),
        ethereum.Value.fromUnsignedBigInt(safeTxGas),
        ethereum.Value.fromUnsignedBigInt(baseGas),
        ethereum.Value.fromUnsignedBigInt(gasPrice),
        ethereum.Value.fromAddress(gasToken),
        ethereum.Value.fromAddress(refundReceiver),
        ethereum.Value.fromUnsignedBigInt(_nonce)
      ]
    );

    return result[0].toBytes();
  }

  try_encodeTransactionData(
    to: Address,
    value: BigInt,
    data: Bytes,
    operation: i32,
    safeTxGas: BigInt,
    baseGas: BigInt,
    gasPrice: BigInt,
    gasToken: Address,
    refundReceiver: Address,
    _nonce: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "encodeTransactionData",
      "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256):(bytes)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(operation)),
        ethereum.Value.fromUnsignedBigInt(safeTxGas),
        ethereum.Value.fromUnsignedBigInt(baseGas),
        ethereum.Value.fromUnsignedBigInt(gasPrice),
        ethereum.Value.fromAddress(gasToken),
        ethereum.Value.fromAddress(refundReceiver),
        ethereum.Value.fromUnsignedBigInt(_nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  execTransactionFromModule(
    to: Address,
    value: BigInt,
    data: Bytes,
    operation: i32
  ): boolean {
    let result = super.call(
      "execTransactionFromModule",
      "execTransactionFromModule(address,uint256,bytes,uint8):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(operation))
      ]
    );

    return result[0].toBoolean();
  }

  try_execTransactionFromModule(
    to: Address,
    value: BigInt,
    data: Bytes,
    operation: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "execTransactionFromModule",
      "execTransactionFromModule(address,uint256,bytes,uint8):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(operation))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  execTransactionFromModuleReturnData(
    to: Address,
    value: BigInt,
    data: Bytes,
    operation: i32
  ): GnosisSafeProxy__execTransactionFromModuleReturnDataResult {
    let result = super.call(
      "execTransactionFromModuleReturnData",
      "execTransactionFromModuleReturnData(address,uint256,bytes,uint8):(bool,bytes)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(operation))
      ]
    );

    return new GnosisSafeProxy__execTransactionFromModuleReturnDataResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_execTransactionFromModuleReturnData(
    to: Address,
    value: BigInt,
    data: Bytes,
    operation: i32
  ): ethereum.CallResult<
    GnosisSafeProxy__execTransactionFromModuleReturnDataResult
  > {
    let result = super.tryCall(
      "execTransactionFromModuleReturnData",
      "execTransactionFromModuleReturnData(address,uint256,bytes,uint8):(bool,bytes)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(operation))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GnosisSafeProxy__execTransactionFromModuleReturnDataResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getModulesPaginated(
    start: Address,
    pageSize: BigInt
  ): GnosisSafeProxy__getModulesPaginatedResult {
    let result = super.call(
      "getModulesPaginated",
      "getModulesPaginated(address,uint256):(address[],address)",
      [
        ethereum.Value.fromAddress(start),
        ethereum.Value.fromUnsignedBigInt(pageSize)
      ]
    );

    return new GnosisSafeProxy__getModulesPaginatedResult(
      result[0].toAddressArray(),
      result[1].toAddress()
    );
  }

  try_getModulesPaginated(
    start: Address,
    pageSize: BigInt
  ): ethereum.CallResult<GnosisSafeProxy__getModulesPaginatedResult> {
    let result = super.tryCall(
      "getModulesPaginated",
      "getModulesPaginated(address,uint256):(address[],address)",
      [
        ethereum.Value.fromAddress(start),
        ethereum.Value.fromUnsignedBigInt(pageSize)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GnosisSafeProxy__getModulesPaginatedResult(
        value[0].toAddressArray(),
        value[1].toAddress()
      )
    );
  }

  getOwners(): Array<Address> {
    let result = super.call("getOwners", "getOwners():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getOwners(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getOwners", "getOwners():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getStorageAt(offset: BigInt, length: BigInt): Bytes {
    let result = super.call(
      "getStorageAt",
      "getStorageAt(uint256,uint256):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(length)
      ]
    );

    return result[0].toBytes();
  }

  try_getStorageAt(offset: BigInt, length: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getStorageAt",
      "getStorageAt(uint256,uint256):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(length)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getThreshold(): BigInt {
    let result = super.call("getThreshold", "getThreshold():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getThreshold", "getThreshold():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTransactionHash(
    to: Address,
    value: BigInt,
    data: Bytes,
    operation: i32,
    safeTxGas: BigInt,
    baseGas: BigInt,
    gasPrice: BigInt,
    gasToken: Address,
    refundReceiver: Address,
    _nonce: BigInt
  ): Bytes {
    let result = super.call(
      "getTransactionHash",
      "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(operation)),
        ethereum.Value.fromUnsignedBigInt(safeTxGas),
        ethereum.Value.fromUnsignedBigInt(baseGas),
        ethereum.Value.fromUnsignedBigInt(gasPrice),
        ethereum.Value.fromAddress(gasToken),
        ethereum.Value.fromAddress(refundReceiver),
        ethereum.Value.fromUnsignedBigInt(_nonce)
      ]
    );

    return result[0].toBytes();
  }

  try_getTransactionHash(
    to: Address,
    value: BigInt,
    data: Bytes,
    operation: i32,
    safeTxGas: BigInt,
    baseGas: BigInt,
    gasPrice: BigInt,
    gasToken: Address,
    refundReceiver: Address,
    _nonce: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getTransactionHash",
      "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(operation)),
        ethereum.Value.fromUnsignedBigInt(safeTxGas),
        ethereum.Value.fromUnsignedBigInt(baseGas),
        ethereum.Value.fromUnsignedBigInt(gasPrice),
        ethereum.Value.fromAddress(gasToken),
        ethereum.Value.fromAddress(refundReceiver),
        ethereum.Value.fromUnsignedBigInt(_nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isModuleEnabled(module: Address): boolean {
    let result = super.call(
      "isModuleEnabled",
      "isModuleEnabled(address):(bool)",
      [ethereum.Value.fromAddress(module)]
    );

    return result[0].toBoolean();
  }

  try_isModuleEnabled(module: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isModuleEnabled",
      "isModuleEnabled(address):(bool)",
      [ethereum.Value.fromAddress(module)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(owner: Address): boolean {
    let result = super.call("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBoolean();
  }

  try_isOwner(owner: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nonce(): BigInt {
    let result = super.call("nonce", "nonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonce", "nonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requiredTxGas(
    to: Address,
    value: BigInt,
    data: Bytes,
    operation: i32
  ): BigInt {
    let result = super.call(
      "requiredTxGas",
      "requiredTxGas(address,uint256,bytes,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(operation))
      ]
    );

    return result[0].toBigInt();
  }

  try_requiredTxGas(
    to: Address,
    value: BigInt,
    data: Bytes,
    operation: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "requiredTxGas",
      "requiredTxGas(address,uint256,bytes,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(operation))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signedMessages(param0: Bytes): BigInt {
    let result = super.call(
      "signedMessages",
      "signedMessages(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_signedMessages(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "signedMessages",
      "signedMessages(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddOwnerWithThresholdCall extends ethereum.Call {
  get inputs(): AddOwnerWithThresholdCall__Inputs {
    return new AddOwnerWithThresholdCall__Inputs(this);
  }

  get outputs(): AddOwnerWithThresholdCall__Outputs {
    return new AddOwnerWithThresholdCall__Outputs(this);
  }
}

export class AddOwnerWithThresholdCall__Inputs {
  _call: AddOwnerWithThresholdCall;

  constructor(call: AddOwnerWithThresholdCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _threshold(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddOwnerWithThresholdCall__Outputs {
  _call: AddOwnerWithThresholdCall;

  constructor(call: AddOwnerWithThresholdCall) {
    this._call = call;
  }
}

export class ApproveHashCall extends ethereum.Call {
  get inputs(): ApproveHashCall__Inputs {
    return new ApproveHashCall__Inputs(this);
  }

  get outputs(): ApproveHashCall__Outputs {
    return new ApproveHashCall__Outputs(this);
  }
}

export class ApproveHashCall__Inputs {
  _call: ApproveHashCall;

  constructor(call: ApproveHashCall) {
    this._call = call;
  }

  get hashToApprove(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ApproveHashCall__Outputs {
  _call: ApproveHashCall;

  constructor(call: ApproveHashCall) {
    this._call = call;
  }
}

export class ChangeThresholdCall extends ethereum.Call {
  get inputs(): ChangeThresholdCall__Inputs {
    return new ChangeThresholdCall__Inputs(this);
  }

  get outputs(): ChangeThresholdCall__Outputs {
    return new ChangeThresholdCall__Outputs(this);
  }
}

export class ChangeThresholdCall__Inputs {
  _call: ChangeThresholdCall;

  constructor(call: ChangeThresholdCall) {
    this._call = call;
  }

  get _threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeThresholdCall__Outputs {
  _call: ChangeThresholdCall;

  constructor(call: ChangeThresholdCall) {
    this._call = call;
  }
}

export class DisableModuleCall extends ethereum.Call {
  get inputs(): DisableModuleCall__Inputs {
    return new DisableModuleCall__Inputs(this);
  }

  get outputs(): DisableModuleCall__Outputs {
    return new DisableModuleCall__Outputs(this);
  }
}

export class DisableModuleCall__Inputs {
  _call: DisableModuleCall;

  constructor(call: DisableModuleCall) {
    this._call = call;
  }

  get prevModule(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get module(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DisableModuleCall__Outputs {
  _call: DisableModuleCall;

  constructor(call: DisableModuleCall) {
    this._call = call;
  }
}

export class EnableModuleCall extends ethereum.Call {
  get inputs(): EnableModuleCall__Inputs {
    return new EnableModuleCall__Inputs(this);
  }

  get outputs(): EnableModuleCall__Outputs {
    return new EnableModuleCall__Outputs(this);
  }
}

export class EnableModuleCall__Inputs {
  _call: EnableModuleCall;

  constructor(call: EnableModuleCall) {
    this._call = call;
  }

  get module(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableModuleCall__Outputs {
  _call: EnableModuleCall;

  constructor(call: EnableModuleCall) {
    this._call = call;
  }
}

export class ExecTransactionCall extends ethereum.Call {
  get inputs(): ExecTransactionCall__Inputs {
    return new ExecTransactionCall__Inputs(this);
  }

  get outputs(): ExecTransactionCall__Outputs {
    return new ExecTransactionCall__Outputs(this);
  }
}

export class ExecTransactionCall__Inputs {
  _call: ExecTransactionCall;

  constructor(call: ExecTransactionCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get operation(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get safeTxGas(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get baseGas(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get gasPrice(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get gasToken(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get refundReceiver(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get signatures(): Bytes {
    return this._call.inputValues[9].value.toBytes();
  }
}

export class ExecTransactionCall__Outputs {
  _call: ExecTransactionCall;

  constructor(call: ExecTransactionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExecTransactionFromModuleCall extends ethereum.Call {
  get inputs(): ExecTransactionFromModuleCall__Inputs {
    return new ExecTransactionFromModuleCall__Inputs(this);
  }

  get outputs(): ExecTransactionFromModuleCall__Outputs {
    return new ExecTransactionFromModuleCall__Outputs(this);
  }
}

export class ExecTransactionFromModuleCall__Inputs {
  _call: ExecTransactionFromModuleCall;

  constructor(call: ExecTransactionFromModuleCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get operation(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class ExecTransactionFromModuleCall__Outputs {
  _call: ExecTransactionFromModuleCall;

  constructor(call: ExecTransactionFromModuleCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExecTransactionFromModuleReturnDataCall extends ethereum.Call {
  get inputs(): ExecTransactionFromModuleReturnDataCall__Inputs {
    return new ExecTransactionFromModuleReturnDataCall__Inputs(this);
  }

  get outputs(): ExecTransactionFromModuleReturnDataCall__Outputs {
    return new ExecTransactionFromModuleReturnDataCall__Outputs(this);
  }
}

export class ExecTransactionFromModuleReturnDataCall__Inputs {
  _call: ExecTransactionFromModuleReturnDataCall;

  constructor(call: ExecTransactionFromModuleReturnDataCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get operation(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class ExecTransactionFromModuleReturnDataCall__Outputs {
  _call: ExecTransactionFromModuleReturnDataCall;

  constructor(call: ExecTransactionFromModuleReturnDataCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get returnData(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class RemoveOwnerCall extends ethereum.Call {
  get inputs(): RemoveOwnerCall__Inputs {
    return new RemoveOwnerCall__Inputs(this);
  }

  get outputs(): RemoveOwnerCall__Outputs {
    return new RemoveOwnerCall__Outputs(this);
  }
}

export class RemoveOwnerCall__Inputs {
  _call: RemoveOwnerCall;

  constructor(call: RemoveOwnerCall) {
    this._call = call;
  }

  get prevOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _threshold(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveOwnerCall__Outputs {
  _call: RemoveOwnerCall;

  constructor(call: RemoveOwnerCall) {
    this._call = call;
  }
}

export class RequiredTxGasCall extends ethereum.Call {
  get inputs(): RequiredTxGasCall__Inputs {
    return new RequiredTxGasCall__Inputs(this);
  }

  get outputs(): RequiredTxGasCall__Outputs {
    return new RequiredTxGasCall__Outputs(this);
  }
}

export class RequiredTxGasCall__Inputs {
  _call: RequiredTxGasCall;

  constructor(call: RequiredTxGasCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get operation(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class RequiredTxGasCall__Outputs {
  _call: RequiredTxGasCall;

  constructor(call: RequiredTxGasCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetFallbackHandlerCall extends ethereum.Call {
  get inputs(): SetFallbackHandlerCall__Inputs {
    return new SetFallbackHandlerCall__Inputs(this);
  }

  get outputs(): SetFallbackHandlerCall__Outputs {
    return new SetFallbackHandlerCall__Outputs(this);
  }
}

export class SetFallbackHandlerCall__Inputs {
  _call: SetFallbackHandlerCall;

  constructor(call: SetFallbackHandlerCall) {
    this._call = call;
  }

  get handler(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFallbackHandlerCall__Outputs {
  _call: SetFallbackHandlerCall;

  constructor(call: SetFallbackHandlerCall) {
    this._call = call;
  }
}

export class SetGuardCall extends ethereum.Call {
  get inputs(): SetGuardCall__Inputs {
    return new SetGuardCall__Inputs(this);
  }

  get outputs(): SetGuardCall__Outputs {
    return new SetGuardCall__Outputs(this);
  }
}

export class SetGuardCall__Inputs {
  _call: SetGuardCall;

  constructor(call: SetGuardCall) {
    this._call = call;
  }

  get guard(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGuardCall__Outputs {
  _call: SetGuardCall;

  constructor(call: SetGuardCall) {
    this._call = call;
  }
}

export class SetupCall extends ethereum.Call {
  get inputs(): SetupCall__Inputs {
    return new SetupCall__Inputs(this);
  }

  get outputs(): SetupCall__Outputs {
    return new SetupCall__Outputs(this);
  }
}

export class SetupCall__Inputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }

  get _owners(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _threshold(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get fallbackHandler(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get paymentToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get payment(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get paymentReceiver(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class SetupCall__Outputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }
}

export class SimulateAndRevertCall extends ethereum.Call {
  get inputs(): SimulateAndRevertCall__Inputs {
    return new SimulateAndRevertCall__Inputs(this);
  }

  get outputs(): SimulateAndRevertCall__Outputs {
    return new SimulateAndRevertCall__Outputs(this);
  }
}

export class SimulateAndRevertCall__Inputs {
  _call: SimulateAndRevertCall;

  constructor(call: SimulateAndRevertCall) {
    this._call = call;
  }

  get targetContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get calldataPayload(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SimulateAndRevertCall__Outputs {
  _call: SimulateAndRevertCall;

  constructor(call: SimulateAndRevertCall) {
    this._call = call;
  }
}

export class SwapOwnerCall extends ethereum.Call {
  get inputs(): SwapOwnerCall__Inputs {
    return new SwapOwnerCall__Inputs(this);
  }

  get outputs(): SwapOwnerCall__Outputs {
    return new SwapOwnerCall__Outputs(this);
  }
}

export class SwapOwnerCall__Inputs {
  _call: SwapOwnerCall;

  constructor(call: SwapOwnerCall) {
    this._call = call;
  }

  get prevOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oldOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get newOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SwapOwnerCall__Outputs {
  _call: SwapOwnerCall;

  constructor(call: SwapOwnerCall) {
    this._call = call;
  }
}
